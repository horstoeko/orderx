<?xml version="1.0" encoding="UTF-8"?>
<project name="php-automate-build-ant" default="full-build" basedir=".">
    <!-- By default the tools are managed by Composer in ${basedir}/vendor/bin -->
    <property name="url.composer.download" value="https://getcomposer.org/download/2.2.6/composer.phar"/>
    <property name="url.phpdox.download" value="https://github.com/theseer/phpdox/releases/download/0.12.0/phpdox-0.12.0.phar"/>
    <property name="url.validator.download" value="https://github.com/itplr-kosit/validator/releases/download/v1.4.0/validationtool-1.4.0.zip"/>
    <property name="url.validator.scenarios.download" value="https://github.com/itplr-kosit/validator-configuration-xrechnung/releases/download/release-2020-07-31/validator-configuration-xrechnung_2.0.0_2020-07-31.zip"/>
    <property name="validatorzipdir" value="${basedir}/build/validator"/>
    <property name="validatorconfigzipdir" value="${basedir}/build/validator"/>
    <property name="validatorzipname" value="validator.zip"/>
    <property name="validatorconfigzipname" value="validator-configuration.zip"/>
    <property name="validatorzip" value="${validatorzipdir}/${validatorzipname}"/>
    <property name="validatorconfigzip" value="${validatorconfigzipdir}/${validatorconfigzipname}"/>
    <property name="composer" value="${basedir}/composer.phar"/>
    <property name="pdepend" value="${basedir}/vendor/bin/pdepend"/>
    <property name="phpcpd" value="${basedir}/vendor/bin/phpcpd"/>
    <property name="phpcs" value="${basedir}/vendor/bin/phpcs"/>
    <property name="phpdox" value="${basedir}/phpdox.phar"/>
    <property name="phploc" value="${basedir}/vendor/bin/phploc"/>
    <property name="phpmd" value="${basedir}/vendor/bin/phpmd"/>
    <property name="phpunit" value="${basedir}/vendor/bin/phpunit"/>
    <property name="phpstan" value="${basedir}/vendor/bin/phpstan"/>
    <property name="sami" value="/usr/local/sbin/sami.phar"/>
    <property name="git" value="/usr/bin/git"/>
    <target name="clean" unless="clean.done" description="Cleanup build artifacts.">
        <delete dir="${basedir}/build/builddoc"/>
        <delete dir="${basedir}/build/doc"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdox"/>
        <delete dir="${basedir}/build/dist"/>
        <property name="clean.done" value="true"/>
    </target>
    <target name="composer" description="Install composer packages including require-dev.">
        <get src="${url.composer.download}" dest="${composer}"/>
        <exec executable="chmod" failonerror="true">
            <arg value="+x"/>
            <arg path="${composer}"/>
        </exec>
        <exec executable="php" failonerror="true">
            <arg path="${composer}"/>
            <arg value="install"/>
            <arg value="--prefer-dist"/>
            <arg value="--no-progress"/>
        </exec>
        <exec executable="php" failonerror="true">
            <arg path="${composer}"/>
            <arg value="update"/>
        </exec>
    </target>
    <target name="downloadphpdox" description="Install phpdox.">
        <get src="${url.phpdox.download}" dest="${phpdox}"/>
        <exec executable="chmod" failonerror="true">
            <arg value="+x"/>
            <arg value="${phpdox}"/>
        </exec>
    </target>
    <target name="full-build" depends="prepare,composer,static-analysis,phpunit,schematron,phpdox,-check-failure,projectdoc,deploy" description="Perform static analysis, run tests, and generate project documentation.">
        <echo message="Built"/>
    </target>
    <target name="lint" unless="lint.done" description="Perform syntax check of PHP sourcecode files.">
        <apply executable="php" failonerror="true" taskname="lint">
            <arg value="-l"/>
            <fileset dir="${basedir}/src">
                <include name="**/*.php"/>
            </fileset>
            <fileset dir="${basedir}/tests">
                <include name="**/*.php"/>
            </fileset>
        </apply>
        <property name="lint.done" value="true"/>
    </target>
    <target name="pdepend" unless="pdepend.done" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
            <arg path="${basedir}/src"/>
        </exec>
        <property name="pdepend.done" value="true"/>
    </target>
    <target name="phpcpd" unless="phpcpd.done" description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--exclude"/>
            <arg path="${basedir}/src/entities"/>
            <arg path="${basedir}/src"/>
        </exec>
        <property name="phpcpd.done" value="true"/>
    </target>
    <target name="phpcpd-ci" unless="phpcpd.done" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--log-pmd"/>
            <arg path="${basedir}/build/logs/pmd-cpd.xml"/>
            <arg value="--exclude"/>
            <arg path="${basedir}/src/entities/"/>
            <arg path="${basedir}/src"/>
        </exec>
        <property name="phpcpd.done" value="true"/>
    </target>
    <target name="phpcs" unless="phpcs.done" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=${basedir}/build/phpcsrules.xml"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/src"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phpcs.done" value="true"/>
    </target>
    <target name="phpcs-ci" unless="phpcs.done" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=${basedir}/build/phpcsrules.xml"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/src"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phpcs.done" value="true"/>
    </target>
    <target name="phpstan" unless="phpstan.done" description="Find coding standard violations using PHPStan and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpstan}" taskname="phpstan">
            <arg value="analyze"/>
            <arg value="-c"/>
            <arg path="${basedir}/build/phpstan.neon"/>
            <arg value="--autoload-file=${basedir}/vendor/autoload.php"/>
            <arg value="--no-interaction"/>
            <arg value="--no-progress"/>
            <arg value="--error-format=table"/>
        </exec>
        <property name="phpstan.done" value="true"/>
    </target>
    <target name="phpstan-ci" unless="phpstan.done" depends="prepare" description="Find coding standard violations using PHPStan and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpstan}" taskname="phpstan" outputproperty="phpstan.output">
            <arg value="analyze"/>
            <arg value="-c"/>
            <arg path="${basedir}/build/phpstan.neon"/>
            <arg value="--autoload-file=${basedir}/vendor/autoload.php"/>
            <arg value="--no-interaction"/>
            <arg value="--no-progress"/>
            <arg value="--error-format=checkstyle"/>
        </exec>
        <echo message="${phpstan.output}" file="${basedir}/build/logs/checkstyle_phpstan.xml"/>
        <property name="phpstan.done" value="true"/>
    </target>
    <target name="phpdox" unless="phpdox.done" depends="downloadphpdox,phploc-ci,phpcs-ci,phpmd-ci,phpstan-ci" description="Generate project documentation using phpDox.">
        <exec executable="php" dir="${basedir}/build" taskname="phpdox">
            <arg path="${phpdox}"/>
        </exec>
        <property name="phpdox.done" value="true"/>
    </target>
    <target name="phploc" unless="phploc.done" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg path="${basedir}/src"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phploc.done" value="true"/>
    </target>
    <target name="phploc-ci" unless="phploc.done" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${basedir}/build/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg path="${basedir}/src"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phploc.done" value="true"/>
    </target>
    <target name="phpmd" unless="phpmd.done" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src"/>
            <arg value="text"/>
            <arg path="${basedir}/build/phpmd.xml"/>
            <arg value="--exclude"/>
            <arg path="${basedir}/src/entities/"/>
        </exec>
        <property name="phpmd.done" value="true"/>
    </target>
    <target name="phpmd-ci" unless="phpmd.done" depends="prepare" description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src"/>
            <arg value="xml"/>
            <arg path="${basedir}/build/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.xml"/>
            <arg value="--exclude"/>
            <arg path="${basedir}/src/entities/"/>
        </exec>
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src"/>
            <arg value="html"/>
            <arg path="${basedir}/build/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.html"/>
            <arg value="--exclude"/>
            <arg path="${basedir}/src/entities/"/>
        </exec>
        <property name="phpmd.done" value="true"/>
    </target>
    <target name="phpunit" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit.">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
            <arg path="tests"/>
        </exec>
        <property name="phpunit.done" value="true"/>
    </target>
    <target name="phpunit-no-coverage" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit without generating code coverage reports.">
        <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
            <arg path="tests"/>
            <arg value="--no-coverage"/>
        </exec>
        <property name="phpunit.done" value="true"/>
    </target>
    <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build.">
        <mkdir dir="${basedir}/build/builddoc"/>
        <mkdir dir="${basedir}/build/doc"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <mkdir dir="${basedir}/build/dist"/>
        <property name="prepare.done" value="true"/>
    </target>
    <target name="quick-build" depends="prepare,composer,lint,phpunit-no-coverage" description="Perform lint check and run tests without generating code coverage reports.">
        <echo message="Built"/>
    </target>
    <target name="static-analysis" depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpstan-ci,phpcpd-ci" description="Perform static analysis.">
        <echo message="Done"/>
    </target>
    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
        <fail message="Schematron for XRechnung 2.0 did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.schematron.xrechnung}" arg2="0"/>
                </not>
            </condition>
        </fail>
        <fail message="Schematron for EN16931 did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.schematron.en16931}" arg2="0"/>
                </not>
            </condition>
        </fail>
        <echo message="Checked failure"/>
    </target>
    <target name="projectdoc" depends="prepare" description="Generator project documentation using Sami.">
        <exec executable="php" taskname="projectdoc">
            <arg path="${sami}"/>
            <arg value="update"/>
            <arg path="${basedir}/build/sami.config.php"/>
        </exec>
        <delete file="${basedir}/build/doc/PROJECT_VERSION"/>
        <delete file="${basedir}/build/doc/SAMI_VERSION"/>
        <delete file="${basedir}/build/doc/renderer.index"/>
        <delete file="${basedir}/build/doc/opensearch.xml"/>
        <delete dir="${basedir}/build/cache"/>
        <property name="projectdoc.done" value="true"/>
    </target>
    <target name="deploy" description="Deplay build">
        <zip destfile="${basedir}/build/dist/doc.zip">
            <fileset dir="${basedir}/build/doc">
                <include name="**/*.*"/>
            </fileset>
        </zip>
        <zip destfile="${basedir}/build/dist/src.zip">
            <fileset dir="${basedir}/src">
                <include name="**/*.*"/>
            </fileset>
        </zip>
        <zip destfile="${basedir}/build/dist/builddoc.zip">
            <fileset dir="${basedir}/build">
                <include name="builddoc/**/*.*"/>
                <include name="coverage/**/*.*"/>
                <include name="coverage-html/**/*.*"/>
                <include name="logs/**/*.*"/>
                <include name="pdepend/**/*.*"/>
                <include name="phpdox/**/*.*"/>
            </fileset>
        </zip>
        <!--
        <copy todir="${basedir}/doc">
            <fileset dir="${basedir}/build/doc">
                <include name= "**/*.*" />
            </fileset>
        </copy>
        <exec executable="${git}" passthru="true">
            <arg value="add"/>
            <arg path="${asedir}/doc"/>
        </exec>
        <exec executable="${git}" passthru="true">
            <arg value="commit"/>
            <arg value="-a"/>
            <arg value="-m"/>
            <arg value="Updated documentation"/>
        </exec>
        <exec executable="${git}" passthru="true">
            <arg value="push"/>
            <arg path="origin"/>
            <arg path="master:master"/>
        </exec>
        -->
    </target>
    <target name="projectdocstandalone" description="Generator project documentation using phpdocumentator.">
        <delete dir="${basedir}/cache"/>
        <delete dir="${basedir}/doc"/>
        <mkdir dir="${basedir}/cache"/>
        <mkdir dir="${basedir}/doc"/>
        <exec executable="php">
            <arg path="${sami}"/>
            <arg value="update"/>
            <arg path="${basedir}/build/sami.config.deploy.php"/>
        </exec>
        <delete file="${basedir}/doc/PROJECT_VERSION"/>
        <delete file="${basedir}/doc/SAMI_VERSION"/>
        <delete file="${basedir}/doc/renderer.index"/>
        <delete file="${basedir}/doc/opensearch.xml"/>
        <delete dir="${basedir}/cache"/>
    </target>
    <target name="schematron" description="Validate agains schematron">
        <!-- Clean -->
        <delete dir="${basedir}/build/validator"/>
        <delete file="${basedir}/examples/factur-x.xml"/>
        <mkdir dir="${basedir}/build/validator"/>
        <!-- Get Validator -->
        <echo message="Downloading validator..."/>
        <exec executable="wget" failonerror="true">
            <arg value="${url.validator.download}"/>
            <arg value="-O"/>
            <arg path="${validatorzip}"/>
        </exec>
        <echo message="Downloaded validator."/>
        <!-- Get Scenarios -->
        <echo message="Downloading scenarios..."/>
        <exec executable="wget" failonerror="true">
            <arg value="${url.validator.scenarios.download}"/>
            <arg value="-O"/>
            <arg path="${validatorconfigzip}"/>
        </exec>
        <echo message="Downloaded validator."/>
        <!-- Unpacking -->
        <echo message="Unpacking..."/>
        <exec executable="unzip" failonerror="true">
            <arg path="${validatorzip}"/>
            <arg value="-d"/>
            <arg path="${validatorzipdir}"/>
        </exec>
        <exec executable="unzip" failonerror="true">
            <arg path="${validatorconfigzip}"/>
            <arg value="-d"/>
            <arg path="${validatorconfigzipdir}"/>
        </exec>
        <echo message="Unpacked."/>
        <!-- XRechnung 2.0 -->
        <echo message="Creating XRechnung 2.0..."/>
        <exec executable="php" dir="${basedir}/examples" failonerror="true">
            <arg value="-f"/>
            <arg path="./examples/XRechnung2SimpleQuick.php"/>
        </exec>
        <echo message="Created XRechnung 2.0."/>
        <!-- Validate XRechnugn 2.0 -->
        <exec executable="java" resultproperty="result.schematron.xrechnung">
            <arg value="-jar"/>
            <arg path="${basedir}/build/validator/validationtool-1.4.0-standalone.jar"/>
            <arg value="-s"/>
            <arg path="${basedir}/build/validator/scenarios.xml"/>
            <arg path="${basedir}/examples/factur-x.xml"/>
        </exec>
        <!-- EN16931 -->
        <echo message="Creating EN16931..."/>
        <exec executable="php" dir="${basedir}/examples" failonerror="true">
            <arg value="-f"/>
            <arg path="./examples/En16931SimpleQuick.php"/>
        </exec>
        <echo message="Created EN16931."/>
        <!-- Validate XRechnugn 2.0 -->
        <exec executable="java" resultproperty="result.schematron.en16931">
            <arg value="-jar"/>
            <arg path="${basedir}/build/validator/validationtool-1.4.0-standalone.jar"/>
            <arg value="-s"/>
            <arg path="${basedir}/build/validator/scenarios.xml"/>
            <arg path="${basedir}/examples/factur-x.xml"/>
        </exec>
    </target>
</project>